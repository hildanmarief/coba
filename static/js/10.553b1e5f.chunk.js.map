{"version":3,"sources":["@core/components/input-password-toggle/index.js","views/Login.js"],"names":["InputPasswordToggle","props","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","inputClassName","rest","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","inputVisibility","setInputVisibility","_jsxs","Fragment","children","_jsx","Label","for","InputGroup","classnames","_defineProperty","Input","_objectSpread","type","id","InputGroupAddon","addonType","onClick","InputGroupText","size","Eye","EyeOff","renderIcon","defaultProps","captcha1","Math","ceil","random","captcha2","hasil","MySwal","withReactContent","Swal","LoginV1","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","captcha","setCaptcha","history","useHistory","usr","localStorage","getItem","useEffect","push","Card","CardBody","Link","to","e","preventDefault","src","logo","alt","height","Form","onSubmit","event","axios","post","act","token","process","user","pass","then","response","data","success","parseInt","fire","icon","title","text","message","customClass","confirmButton","buttonsStyling","setItem","catch","error","console","FormGroup","value","onChange","target","autoFocus","Col","sm","row","Button","Ripple","color","block"],"mappings":"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","file":"static/js/10.553b1e5f.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n","import React, { useState, useEffect } from \"react\"\nimport { Link, useHistory } from 'react-router-dom'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport { Card, CardBody, Form, FormGroup, Label, Input, Button, Col } from 'reactstrap'\n\nimport axios from 'axios'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nimport '@styles/base/pages/page-auth.scss'\nimport logo from '@src/assets/images/logo/logos.png'\n\nconst captcha1 = Math.ceil(Math.random() * 10)\nconst captcha2 = Math.ceil(Math.random() * 10)\nconst hasil = captcha1 + captcha2\nconst MySwal = withReactContent(Swal)\n\nfunction LoginV1() {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [captcha, setCaptcha] = useState(\"\")\n\n  const history = useHistory()\n\n  const usr = localStorage.getItem('user')\n\n  useEffect(() => {\n    if (usr !== null && password !== null) {\n      history.push(\"/coba/home\")\n    }\n  }, [])\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    axios.post(\"https://smaalfacentauri.com/apis/sma.php\", {\n      act: 'login',\n      token: process.env.REACT_APP_BEARER_TOKEN,\n      user: email,\n      pass: password\n    })\n      .then((response) => {\n        if (response.data.success && parseInt(captcha) === hasil) {\n          localStorage.setItem('user', email)\n          localStorage.setItem('pass', password)\n\n          MySwal.fire({\n            icon: 'success',\n            title: 'Success',\n            text: 'Login Sukses',\n            customClass: {\n              confirmButton: 'btn btn-primary'\n            },\n            buttonsStyling: false\n          }).then(() => {\n            history.push(\"/coba/home\")\n          })\n        } else {\n          return MySwal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: response.data.message,\n            customClass: {\n              confirmButton: 'btn btn-primary'\n            },\n            buttonsStyling: false\n          })\n        }\n      })\n      .catch((error) => {\n        console.error(error)\n      })\n  }\n\n  return (\n    <div className='auth-wrapper auth-v1 px-2'>\n      <div className='auth-inner py-2'>\n        <Card className='mb-0'>\n          <CardBody>\n            <Link className='brand-logo' to='https://hildanmarief.github.io/coba/' onClick={e => e.preventDefault()}>\n              <img src={logo} alt=\"example\" height='60' />\n              <h2 className='brand-text text-primary ml-1'>Portal Guru<br />SMA Alfa Centauri</h2>\n            </Link>\n\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <Input type='text' value={email} onChange={(e) => setEmail(e.target.value)} id='login-email' placeholder='john@example.com' autoFocus />\n              </FormGroup>\n              <FormGroup>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                </div>\n                <InputPasswordToggle value={password} onChange={(e) => setPassword(e.target.value)} className='input-group-merge' id='login-password' />\n              </FormGroup>\n              <div className='d-flex justify-content-between'>\n                <Label className='form-label' for='login-password'>\n                  Enter Captcha\n                </Label>\n              </div>\n              <Col sm='12'>\n                <FormGroup row>\n                  <Label sm='3' size='lg' for='input-large-horizontal'>\n                    {captcha1} + {captcha2}\n                  </Label>\n                  <Col sm='9'>\n                    <Input type='text' value={captcha} onChange={(e) => setCaptcha(e.target.value)} />\n                  </Col>\n                </FormGroup>\n              </Col>\n              <Button.Ripple type=\"submit\" color='primary' block>Login</Button.Ripple>\n            </Form>\n          </CardBody>\n        </Card>\n      </div>\n    </div >\n  )\n}\n\nexport default LoginV1\n"],"sourceRoot":""}